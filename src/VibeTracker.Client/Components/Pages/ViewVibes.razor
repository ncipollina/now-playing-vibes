@page "/"
@page "/view-vibes"
@using System.Net.Http.Json
@using VibeTracker.Shared
@inject HttpClient Http

<PageTitle>Now Playing Vibes</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="text-center mb-4">
                <h1 class="display-4">🎵 Now Playing Vibes</h1>
                <p class="lead text-muted">Share what you're listening to and see what others are vibing to</p>
            </div>
            
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Recent Vibes</h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="LoadVibes">
                        <span class="bi bi-arrow-clockwise"></span> Refresh
                    </button>
                    <a href="/submit-vibe" class="btn btn-primary">
                        <span class="bi bi-plus-circle"></span> Submit Vibe
                    </a>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading vibes...</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                </div>
            }
            else if (vibes?.Any() == true)
            {
                <div class="row">
                    @foreach (var vibe in vibes)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 shadow-sm" style="background: @GetPastelBackground(vibe.Id);">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title">
                                            @GetVibeEmoji(vibe.VibeType) @vibe.VibeType
                                        </h5>
                                        <small class="text-muted">
                                            @GetRelativeTime(vibe.Timestamp)
                                        </small>
                                    </div>
                                    <p class="card-text">@vibe.Message</p>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <small class="text-muted">
                                        @vibe.Timestamp.ToString("MMM dd, yyyy 'at' HH:mm")
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-music-note-beamed" style="font-size: 4rem; color: #6c757d;"></i>
                    </div>
                    <h4 class="text-muted">Welcome to Now Playing Vibes!</h4>
                    <p class="text-muted mb-4">No vibes have been shared yet. Be the first to tell us what you're listening to!</p>
                    <a href="/submit-vibe" class="btn btn-primary btn-lg">
                        <span class="bi bi-plus-circle me-2"></span>
                        Submit Your First Vibe
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<VibeEntry>? vibes;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadVibes();
    }

    private async Task LoadVibes()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            vibes = await Http.GetFromJsonAsync<IEnumerable<VibeEntry>>("/vibes");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load vibes: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetVibeEmoji(string vibeType)
    {
        return vibeType switch
        {
            "Lo-fi" => "🎵",
            "Metal" => "🤘",
            "Synthwave" => "🌆",
            "Classical" => "🎼",
            "Jazz" => "🎷",
            "Rock" => "🎸",
            "Electronic" => "🎛️",
            "Indie" => "🎤",
            "Hip-Hop" => "🎤",
            "Folk" => "🪕",
            _ => "🎵"
        };
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var now = DateTime.UtcNow;
        var timeSpan = now - timestamp;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hr ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} day{(timeSpan.TotalDays >= 2 ? "s" : "")} ago";
        
        return timestamp.ToString("MMM dd, yyyy");
    }

    private string GetPastelBackground(int id)
    {
        // Array of beautiful pastel colors
        var pastelColors = new[]
        {
            "linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%)",  // Peach
            "linear-gradient(135deg, #a8e6cf 0%, #88d8c0 100%)",  // Mint
            "linear-gradient(135deg, #ffd3a5 0%, #fd9853 100%)",  // Orange
            "linear-gradient(135deg, #c7ecee 0%, #a8e6cf 100%)",  // Aqua
            "linear-gradient(135deg, #ffeaa7 0%, #ffd3a5 100%)",  // Yellow
            "linear-gradient(135deg, #e8cbc0 0%, #636fa4 100%)",  // Lavender
            "linear-gradient(135deg, #fbc2eb 0%, #a18cd1 100%)",  // Pink Purple
            "linear-gradient(135deg, #fad0c4 0%, #ffd1ff 100%)",  // Pink
            "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",  // Cyan Pink
            "linear-gradient(135deg, #d299c2 0%, #fef9d7 100%)",  // Purple Yellow
            "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)",  // Blue
            "linear-gradient(135deg, #fdcbf1 0%, #e6dee9 100%)",  // Soft Pink
        };

        // Use the ID to consistently get the same color for the same vibe
        var colorIndex = id % pastelColors.Length;
        return pastelColors[colorIndex];
    }
}